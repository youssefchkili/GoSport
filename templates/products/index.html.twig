{% extends 'coolBase.html.twig' %}
{% import "components/cardMacros.html.twig" as components %}

{% block title %}GoSport: All Products{% endblock %}

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/nouislider@15.7.0/dist/nouislider.min.css" rel="stylesheet">
{% endblock %}
{% block importmap %}
    <script src="https://cdn.jsdelivr.net/npm/nouislider@15.7.0/dist/nouislider.min.js"></script>
{% endblock %}

    {% block sidebarBody %}
        <div class="mb-3 w-80">
            <button class="btn btn-danger" type="button" onclick="toggleCategories()">Categories</button>

            <div class="mt-2 pl-3" id="categoriesBox" style="overflow: hidden; height: 0; transition: height 0.3s ease;">
                <div id="categoriesContent">
                    {% for category in categories %}
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="categoryCheckbox{{ category.id }}" name="categoryCheckbox{{ category.id }}" value="{{ category.id }}"
                                {% if categoriesAllowed is not defined or category.id in categoriesAllowed %} checked {% endif %}>
                            <label class="form-check-label" for="categoryCheckbox{{ category.id }}">
                                {{ category.name }}
                            </label>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <div class="container my-4" style="width: 90%;">
            <label for="price-slider" class="form-label">Price Range</label>
            <br>
            <br>
            <br>
            <div id="price-slider"></div>
            <div class="mt-3">
                <span>Min: <span id="min-price"></span>DT</span> &nbsp;-&nbsp;
                <input type="hidden" id="min-price-input" name="min-price">
                <span>Max: <span id="max-price" name="max-price"></span>DT</span>
                <input type="hidden" id="max-price-input" name="max-price">
            </div>
        </div>
        {% block applyFilters %}
            <button class="btn btn-danger" id="apply-btn" type="submit" style="float: right; border-radius: 50px 0 0 50px;">
                Apply
            </button>
        {% endblock %}

    {% endblock %}
{% block wishlistBag %}
    {{ parent() }}
{% endblock %}
{% block body %}

    {% block productCrud %}
    {% endblock %}

    {% if products is empty %}
        <br>
        {% block empty %}
        <a href="/products" class="text-white text-center d-block">No matching results...</a>
        {% endblock %}
    {% else %}
        <div class="container pt-20">
            <div class="row">
                {% for product in products|slice((currentPage-1)*20, 20) %}
                    {{ components.productCard(product) }}
                {% endfor %}
            </div>
        </div>
    {% endif %}

    {% if products|length > 0 %}
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center">
                {% if currentPage > 1 %}
                    <li class="page-item p-0.5">
                        <a class="pagination-knob page-link text-danger bg-dark rounded-circle d-flex align-items-center justify-content-center" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({'page': currentPage - 1})) }}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                {% endif %}

                {% for page in 1..totalPages %}
                    <li class="page-item p-0.5">
                        <a class="pagination-knob page-link text-danger rounded-circle d-flex align-items-center justify-content-center {% if page == currentPage %} bg-danger text-white{% else %} bg-dark {% endif %}" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({'page': page})) }}">{{ page }}</a>
                    </li>
                {% endfor %}

                {% if currentPage < totalPages %}
                    <li class="page-item p-0.5">
                        <a class="pagination-knob page-link text-danger bg-dark rounded-circle d-flex align-items-center justify-content-center" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({'page': currentPage + 1})) }}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                {% endif %}
            </ul>
        </nav>
    {% endif %}

    <script>
        const priceSlider = document.getElementById('price-slider');

        let min = {{ minPrice }};
        let max = {{ maxPrice }};
        {% if minPriceInput is defined %}
            min = {{ minPriceInput }};
        {% endif %}
        {% if maxPriceInput is defined %}
            max = {{ maxPriceInput }};
        {% endif %}
        
        noUiSlider.create(priceSlider,{
                start: [min, max],
                connect: true,
                range: {
                'min': {{ minPrice }},
                'max':{{ maxPrice }}
                },
            step: 1,
            tooltips: true,
            format: {
            to: value => parseFloat(value).toFixed(2),
            from: value => parseFloat(value).toFixed(2)
            }
        });

        const minPrice = document.getElementById('min-price');
        const maxPrice = document.getElementById('max-price');
        const minPriceInput = document.getElementById('min-price-input');
        const maxPriceInput = document.getElementById('max-price-input');

        priceSlider.noUiSlider.on('update', (values) => {
            minPrice.textContent = values[0];
            maxPrice.textContent = values[1];
            minPriceInput.value = values[0];
            maxPriceInput.value = values[1];
        });

        let isExpanded = false;

        function toggleCategories() {
            const box = document.getElementById('categoriesBox');
            const content = document.getElementById('categoriesContent');

            if (!isExpanded) {
                const contentHeight = content.offsetHeight;
                box.style.height = contentHeight + "px";

                // Once expanded, make height auto after transition
                box.addEventListener("transitionend", function handler() {
                    box.style.height = "auto";
                    box.removeEventListener("transitionend", handler);
                });
            } else {
                // Collapse: fix height first, then animate to 0
                box.style.height = box.offsetHeight + "px"; // Fix current height
                requestAnimationFrame(() => {
                    box.style.height = "0";
                });
            }

            isExpanded = !isExpanded;
        }
        
        {{ components.heartsManager(products) }}
    </script>
{% endblock %}